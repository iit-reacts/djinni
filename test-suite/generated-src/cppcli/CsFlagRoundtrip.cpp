// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#include "CsFlagRoundtrip.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "access_flags.hpp"
#include "empty_flags.hpp"

namespace Djinni { namespace TestSuite {

AccessFlags FlagRoundtrip::RoundtripAccess(AccessFlags flag) {
    try {
        auto cs_result = ::testsuite::FlagRoundtrip::roundtrip_access(::djinni::Enum<::testsuite::access_flags, AccessFlags>::ToCpp(flag));
        return ::djinni::Enum<::testsuite::access_flags, AccessFlags>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return (AccessFlags)0; // Unreachable! (Silencing compiler warnings.)
}

EmptyFlags FlagRoundtrip::RoundtripEmpty(EmptyFlags flag) {
    try {
        auto cs_result = ::testsuite::FlagRoundtrip::roundtrip_empty(::djinni::Enum<::testsuite::empty_flags, EmptyFlags>::ToCpp(flag));
        return ::djinni::Enum<::testsuite::empty_flags, EmptyFlags>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return (EmptyFlags)0; // Unreachable! (Silencing compiler warnings.)
}

System::Nullable<AccessFlags> FlagRoundtrip::RoundtripAccessBoxed(System::Nullable<AccessFlags> flag) {
    try {
        auto cs_result = ::testsuite::FlagRoundtrip::roundtrip_access_boxed(::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::access_flags, AccessFlags>>::ToCpp(flag));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::access_flags, AccessFlags>>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return System::Nullable<AccessFlags>(); // Unreachable! (Silencing compiler warnings.)
}

System::Nullable<EmptyFlags> FlagRoundtrip::RoundtripEmptyBoxed(System::Nullable<EmptyFlags> flag) {
    try {
        auto cs_result = ::testsuite::FlagRoundtrip::roundtrip_empty_boxed(::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::empty_flags, EmptyFlags>>::ToCpp(flag));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::empty_flags, EmptyFlags>>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return System::Nullable<EmptyFlags>(); // Unreachable! (Silencing compiler warnings.)
}

ref class FlagRoundtripCppProxy : public FlagRoundtrip {
    using CppType = std::shared_ptr<::testsuite::FlagRoundtrip>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    FlagRoundtripCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

FlagRoundtrip::CppType FlagRoundtrip::ToCpp(FlagRoundtrip::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<FlagRoundtripCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

FlagRoundtrip::CsType FlagRoundtrip::FromCppOpt(const FlagRoundtrip::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<FlagRoundtripCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
