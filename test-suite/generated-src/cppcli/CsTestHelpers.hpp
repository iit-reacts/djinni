// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#pragma once

#include "CsAssortedPrimitives.hpp"
#include "CsClientInterface.hpp"
#include "CsColor.hpp"
#include "CsMapListRecord.hpp"
#include "CsNestedCollection.hpp"
#include "CsPrimitiveList.hpp"
#include "CsSetRecord.hpp"
#include "CsUserToken.hpp"
#include "test_helpers.hpp"
#include <memory>

namespace Djinni { namespace TestSuite {

public ref class TestHelpers abstract {
public:
    static SetRecord^ GetSetRecord();

    static bool CheckSetRecord(SetRecord^ rec);

    static PrimitiveList^ GetPrimitiveList();

    static bool CheckPrimitiveList(PrimitiveList^ pl);

    static NestedCollection^ GetNestedCollection();

    static bool CheckNestedCollection(NestedCollection^ nc);

    static System::Collections::Generic::Dictionary<System::String^, __int64>^ GetMap();

    static bool CheckMap(System::Collections::Generic::Dictionary<System::String^, __int64>^ m);

    static System::Collections::Generic::Dictionary<System::String^, __int64>^ GetEmptyMap();

    static bool CheckEmptyMap(System::Collections::Generic::Dictionary<System::String^, __int64>^ m);

    static MapListRecord^ GetMapListRecord();

    static bool CheckMapListRecord(MapListRecord^ m);

    static void CheckClientInterfaceAscii(ClientInterface^ i);

    static void CheckClientInterfaceNonascii(ClientInterface^ i);

    static void CheckClientInterfaceArgs(ClientInterface^ i);

    static void CheckEnumMap(System::Collections::Generic::Dictionary<Color, System::String^>^ m);

    static void CheckEnum(Color c);

    static UserToken^ TokenId(UserToken^ t);

    static UserToken^ CreateCppToken();

    static void CheckCppToken(UserToken^ t);

    static __int64 CppTokenId(UserToken^ t);

    static void CheckTokenType(UserToken^ t, System::String^ type);

    static System::Nullable<int> ReturnNone();

    static AssortedPrimitives^ AssortedPrimitivesId(AssortedPrimitives^ i);

    static array<System::Byte>^ IdBinary(array<System::Byte>^ b);

internal:
    using CppType = std::shared_ptr<::testsuite::TestHelpers>;
    using CppOptType = std::shared_ptr<::testsuite::TestHelpers>;
    using CsType = TestHelpers^;

    static CppType ToCpp(CsType cs);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp) { return FromCppOpt(cpp); }
};

} }  // namespace Djinni::TestSuite
