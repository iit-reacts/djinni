// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from enum.djinni

#include "CsEnumUsageInterface.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "color.hpp"

namespace Djinni { namespace TestSuite {

ref class EnumUsageInterfaceCppProxy : public EnumUsageInterface {
    using CppType = std::shared_ptr<::testsuite::EnumUsageInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    EnumUsageInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    Color E(Color e) override {
        try {
            auto cs_result = _cppRefHandle->get()->e(::djinni::Enum<::testsuite::color, Color>::ToCpp(e));
            return ::djinni::Enum<::testsuite::color, Color>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return (Color)0; // Unreachable! (Silencing compiler warnings.)
    }

    System::Nullable<Color> O(System::Nullable<Color> o) override {
        try {
            auto cs_result = _cppRefHandle->get()->o(::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::color, Color>>::ToCpp(o));
            return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::testsuite::color, Color>>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return System::Nullable<Color>(); // Unreachable! (Silencing compiler warnings.)
    }

    System::Collections::Generic::List<Color>^ L(System::Collections::Generic::List<Color>^ l) override {
        try {
            auto cs_result = _cppRefHandle->get()->l(::djinni::List<::djinni::Enum<::testsuite::color, Color>>::ToCpp(l));
            return ::djinni::List<::djinni::Enum<::testsuite::color, Color>>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    System::Collections::Generic::HashSet<Color>^ S(System::Collections::Generic::HashSet<Color>^ s) override {
        try {
            auto cs_result = _cppRefHandle->get()->s(::djinni::Set<::djinni::Enum<::testsuite::color, Color>>::ToCpp(s));
            return ::djinni::Set<::djinni::Enum<::testsuite::color, Color>>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    System::Collections::Generic::Dictionary<Color, Color>^ M(System::Collections::Generic::Dictionary<Color, Color>^ m) override {
        try {
            auto cs_result = _cppRefHandle->get()->m(::djinni::Map<::djinni::Enum<::testsuite::color, Color>, ::djinni::Enum<::testsuite::color, Color>>::ToCpp(m));
            return ::djinni::Map<::djinni::Enum<::testsuite::color, Color>, ::djinni::Enum<::testsuite::color, Color>>::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

EnumUsageInterface::CppType EnumUsageInterface::ToCpp(EnumUsageInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<EnumUsageInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

EnumUsageInterface::CsType EnumUsageInterface::FromCppOpt(const EnumUsageInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<EnumUsageInterfaceCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
