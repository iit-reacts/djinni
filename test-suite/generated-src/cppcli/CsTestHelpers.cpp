// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include "CsTestHelpers.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "assorted_primitives.hpp"
#include "client_interface.hpp"
#include "color.hpp"
#include "map_list_record.hpp"
#include "nested_collection.hpp"
#include "primitive_list.hpp"
#include "set_record.hpp"
#include "user_token.hpp"

namespace Djinni { namespace TestSuite {

SetRecord^ TestHelpers::GetSetRecord() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_set_record();
        return ::Djinni::TestSuite::SetRecord::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckSetRecord(SetRecord^ rec) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_set_record(::Djinni::TestSuite::SetRecord::ToCpp(rec));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

PrimitiveList^ TestHelpers::GetPrimitiveList() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_primitive_list();
        return ::Djinni::TestSuite::PrimitiveList::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckPrimitiveList(PrimitiveList^ pl) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_primitive_list(::Djinni::TestSuite::PrimitiveList::ToCpp(pl));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

NestedCollection^ TestHelpers::GetNestedCollection() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_nested_collection();
        return ::Djinni::TestSuite::NestedCollection::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckNestedCollection(NestedCollection^ nc) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_nested_collection(::Djinni::TestSuite::NestedCollection::ToCpp(nc));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

System::Collections::Generic::Dictionary<System::String^, __int64>^ TestHelpers::GetMap() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_map();
        return ::djinni::Map<::djinni::String, ::djinni::I64>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckMap(System::Collections::Generic::Dictionary<System::String^, __int64>^ m) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_map(::djinni::Map<::djinni::String, ::djinni::I64>::ToCpp(m));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

System::Collections::Generic::Dictionary<System::String^, __int64>^ TestHelpers::GetEmptyMap() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_empty_map();
        return ::djinni::Map<::djinni::String, ::djinni::I64>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckEmptyMap(System::Collections::Generic::Dictionary<System::String^, __int64>^ m) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_empty_map(::djinni::Map<::djinni::String, ::djinni::I64>::ToCpp(m));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

MapListRecord^ TestHelpers::GetMapListRecord() {
    try {
        auto cs_result = ::testsuite::TestHelpers::get_map_list_record();
        return ::Djinni::TestSuite::MapListRecord::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

bool TestHelpers::CheckMapListRecord(MapListRecord^ m) {
    try {
        auto cs_result = ::testsuite::TestHelpers::check_map_list_record(::Djinni::TestSuite::MapListRecord::ToCpp(m));
        return ::djinni::Bool::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

void TestHelpers::CheckClientInterfaceAscii(ClientInterface^ i) {
    try {
        ::testsuite::TestHelpers::check_client_interface_ascii(::Djinni::TestSuite::ClientInterface::ToCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

void TestHelpers::CheckClientInterfaceNonascii(ClientInterface^ i) {
    try {
        ::testsuite::TestHelpers::check_client_interface_nonascii(::Djinni::TestSuite::ClientInterface::ToCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

void TestHelpers::CheckClientInterfaceArgs(ClientInterface^ i) {
    try {
        ::testsuite::TestHelpers::check_client_interface_args(::Djinni::TestSuite::ClientInterface::ToCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

void TestHelpers::CheckEnumMap(System::Collections::Generic::Dictionary<Color, System::String^>^ m) {
    try {
        ::testsuite::TestHelpers::check_enum_map(::djinni::Map<::djinni::Enum<::testsuite::color, Color>, ::djinni::String>::ToCpp(m));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

void TestHelpers::CheckEnum(Color c) {
    try {
        ::testsuite::TestHelpers::check_enum(::djinni::Enum<::testsuite::color, Color>::ToCpp(c));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

UserToken^ TestHelpers::TokenId(UserToken^ t) {
    try {
        auto cs_result = ::testsuite::TestHelpers::token_id(::Djinni::TestSuite::UserToken::ToCpp(t));
        return ::Djinni::TestSuite::UserToken::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

UserToken^ TestHelpers::CreateCppToken() {
    try {
        auto cs_result = ::testsuite::TestHelpers::create_cpp_token();
        return ::Djinni::TestSuite::UserToken::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

void TestHelpers::CheckCppToken(UserToken^ t) {
    try {
        ::testsuite::TestHelpers::check_cpp_token(::Djinni::TestSuite::UserToken::ToCpp(t));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

__int64 TestHelpers::CppTokenId(UserToken^ t) {
    try {
        auto cs_result = ::testsuite::TestHelpers::cpp_token_id(::Djinni::TestSuite::UserToken::ToCpp(t));
        return ::djinni::I64::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return 0; // Unreachable! (Silencing compiler warnings.)
}

void TestHelpers::CheckTokenType(UserToken^ t, System::String^ type) {
    try {
        ::testsuite::TestHelpers::check_token_type(::Djinni::TestSuite::UserToken::ToCpp(t),
                                                   ::djinni::String::ToCpp(type));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

System::Nullable<int> TestHelpers::ReturnNone() {
    try {
        auto cs_result = ::testsuite::TestHelpers::return_none();
        return ::djinni::Optional<std::experimental::optional, ::djinni::I32>::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return System::Nullable<int>(); // Unreachable! (Silencing compiler warnings.)
}

AssortedPrimitives^ TestHelpers::AssortedPrimitivesId(AssortedPrimitives^ i) {
    try {
        auto cs_result = ::testsuite::TestHelpers::assorted_primitives_id(::Djinni::TestSuite::AssortedPrimitives::ToCpp(i));
        return ::Djinni::TestSuite::AssortedPrimitives::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

array<System::Byte>^ TestHelpers::IdBinary(array<System::Byte>^ b) {
    try {
        auto cs_result = ::testsuite::TestHelpers::id_binary(::djinni::Binary::ToCpp(b));
        return ::djinni::Binary::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

ref class TestHelpersCppProxy : public TestHelpers {
    using CppType = std::shared_ptr<::testsuite::TestHelpers>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    TestHelpersCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

TestHelpers::CppType TestHelpers::ToCpp(TestHelpers::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<TestHelpersCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

TestHelpers::CsType TestHelpers::FromCppOpt(const TestHelpers::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<TestHelpersCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
