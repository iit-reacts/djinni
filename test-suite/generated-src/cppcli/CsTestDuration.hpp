// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

#pragma once

#include "Duration-cs.hpp"
#include "test_duration.hpp"
#include <memory>

namespace Djinni { namespace TestSuite {

public ref class TestDuration abstract {
public:
    static System::String^ HoursString(System::TimeSpan dt);

    static System::String^ MinutesString(System::TimeSpan dt);

    static System::String^ SecondsString(System::TimeSpan dt);

    static System::String^ MillisString(System::TimeSpan dt);

    static System::String^ MicrosString(System::TimeSpan dt);

    static System::String^ NanosString(System::TimeSpan dt);

    static System::TimeSpan Hours(int count);

    static System::TimeSpan Minutes(int count);

    static System::TimeSpan Seconds(int count);

    static System::TimeSpan Millis(int count);

    static System::TimeSpan Micros(int count);

    static System::TimeSpan Nanos(int count);

    static System::TimeSpan Hoursf(double count);

    static System::TimeSpan Minutesf(double count);

    static System::TimeSpan Secondsf(double count);

    static System::TimeSpan Millisf(double count);

    static System::TimeSpan Microsf(double count);

    static System::TimeSpan Nanosf(double count);

    static System::Nullable<System::TimeSpan> Box(__int64 count);

    static __int64 Unbox(System::Nullable<System::TimeSpan> dt);

internal:
    using CppType = std::shared_ptr<::testsuite::TestDuration>;
    using CppOptType = std::shared_ptr<::testsuite::TestDuration>;
    using CsType = TestDuration^;

    static CppType ToCpp(CsType cs);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp) { return FromCppOpt(cpp); }
};

} }  // namespace Djinni::TestSuite
