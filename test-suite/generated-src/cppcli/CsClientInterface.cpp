// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client_interface.djinni

#include "CsClientInterface.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "client_interface.hpp"

namespace Djinni { namespace TestSuite {

class ClientInterfaceCsProxy : public ::testsuite::ClientInterface {
    using CsType = ::Djinni::TestSuite::ClientInterface^;
    using CsRefType = ::djinni::CsRef<CsType>;
    using HandleType = ::djinni::CsProxyCache::Handle<::djinni::CsRef<CsType>>;
public:
    ClientInterfaceCsProxy(CsRefType cs) : m_djinni_private_proxy_handle(std::move(cs)) {}
    ClientInterfaceCsProxy(const ::djinni::CsRef<System::Object^>& ptr) : ClientInterfaceCsProxy(CsRefType(dynamic_cast<CsType>(ptr.get()))) {}

    ::testsuite::ClientReturnedRecord get_record(int64_t record_id, const std::string & utf8string, const std::experimental::optional<std::string> & misc) override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->GetRecord(::djinni::I64::FromCpp(record_id),
                                                                           ::djinni::String::FromCpp(utf8string),
                                                                           ::djinni::Optional<std::experimental::optional, ::djinni::String>::FromCpp(misc));
        // TODO check cs_result for null
        return ::Djinni::TestSuite::ClientReturnedRecord::ToCpp(cs_result);
    }

    double identifier_check(const std::vector<uint8_t> & data, int32_t r, int64_t jret) override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->IdentifierCheck(::djinni::Binary::FromCpp(data),
                                                                                 ::djinni::I32::FromCpp(r),
                                                                                 ::djinni::I64::FromCpp(jret));
        // TODO check cs_result for null
        return ::djinni::F64::ToCpp(cs_result);
    }

    std::string return_str() override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->ReturnStr();
        // TODO check cs_result for null
        return ::djinni::String::ToCpp(cs_result);
    }

    std::string meth_taking_interface(const std::shared_ptr<::testsuite::ClientInterface> & i) override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->MethTakingInterface(::Djinni::TestSuite::ClientInterface::FromCpp(i));
        // TODO check cs_result for null
        return ::djinni::String::ToCpp(cs_result);
    }

    std::string meth_taking_optional_interface(const std::shared_ptr<::testsuite::ClientInterface> & i) override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->MethTakingOptionalInterface(::djinni::Optional<std::experimental::optional, ::Djinni::TestSuite::ClientInterface>::FromCpp(i));
        // TODO check cs_result for null
        return ::djinni::String::ToCpp(cs_result);
    }

    CsType djinni_private_get_proxied_cs_object() {
        return m_djinni_private_proxy_handle.get().get();
    }

private:
    HandleType m_djinni_private_proxy_handle;
};

ClientInterface::CppType ClientInterface::ToCpp(ClientInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return ::djinni::get_cs_proxy<ClientInterfaceCsProxy>(cs);
}

ClientInterface::CsType ClientInterface::FromCppOpt(const ClientInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return dynamic_cast<ClientInterfaceCsProxy*>(cpp.get())->djinni_private_get_proxied_cs_object();
}

} }  // namespace Djinni::TestSuite
