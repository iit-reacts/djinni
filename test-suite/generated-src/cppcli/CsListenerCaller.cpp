// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multiple_inheritance.djinni

#include "CsListenerCaller.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "first_listener.hpp"
#include "second_listener.hpp"

namespace Djinni { namespace TestSuite {

ListenerCaller^ ListenerCaller::Init(FirstListener^ firstL, SecondListener^ secondL) {
    try {
        auto cs_result = ::testsuite::ListenerCaller::init(::Djinni::TestSuite::FirstListener::ToCpp(firstL),
                                                           ::Djinni::TestSuite::SecondListener::ToCpp(secondL));
        return ::Djinni::TestSuite::ListenerCaller::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

ref class ListenerCallerCppProxy : public ListenerCaller {
    using CppType = std::shared_ptr<::testsuite::ListenerCaller>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    ListenerCallerCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    void CallFirst() override {
        try {
            _cppRefHandle->get()->callFirst();
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    void CallSecond() override {
        try {
            _cppRefHandle->get()->callSecond();
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

ListenerCaller::CppType ListenerCaller::ToCpp(ListenerCaller::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<ListenerCallerCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

ListenerCaller::CsType ListenerCaller::FromCppOpt(const ListenerCaller::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<ListenerCallerCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
