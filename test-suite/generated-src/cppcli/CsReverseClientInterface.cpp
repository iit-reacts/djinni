// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client_interface.djinni

#include "CsReverseClientInterface.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "reverse_client_interface.hpp"

namespace Djinni { namespace TestSuite {

ReverseClientInterface^ ReverseClientInterface::Create() {
    try {
        auto cs_result = ::testsuite::ReverseClientInterface::create();
        return ::Djinni::TestSuite::ReverseClientInterface::FromCpp(cs_result);
    } DJINNI_TRANSLATE_EXCEPTIONS()
    return nullptr; // Unreachable! (Silencing compiler warnings.)
}

ref class ReverseClientInterfaceCppProxy : public ReverseClientInterface {
    using CppType = std::shared_ptr<::testsuite::ReverseClientInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    ReverseClientInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    System::String^ ReturnStr() override {
        try {
            auto cs_result = _cppRefHandle->get()->return_str();
            return ::djinni::String::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    System::String^ MethTakingInterface(ReverseClientInterface^ i) override {
        try {
            auto cs_result = _cppRefHandle->get()->meth_taking_interface(::Djinni::TestSuite::ReverseClientInterface::ToCpp(i));
            return ::djinni::String::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    System::String^ MethTakingOptionalInterface(ReverseClientInterface^ i) override {
        try {
            auto cs_result = _cppRefHandle->get()->meth_taking_optional_interface(::djinni::Optional<std::experimental::optional, ::Djinni::TestSuite::ReverseClientInterface>::ToCpp(i));
            return ::djinni::String::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

ReverseClientInterface::CppType ReverseClientInterface::ToCpp(ReverseClientInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<ReverseClientInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

ReverseClientInterface::CsType ReverseClientInterface::FromCppOpt(const ReverseClientInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<ReverseClientInterfaceCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
