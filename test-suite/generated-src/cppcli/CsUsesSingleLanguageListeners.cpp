// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from single_language_interfaces.djinni

#include "CsUsesSingleLanguageListeners.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "cs_only_listener.hpp"
#include "java_only_listener.hpp"
#include "objc_only_listener.hpp"

namespace Djinni { namespace TestSuite {

ref class UsesSingleLanguageListenersCppProxy : public UsesSingleLanguageListeners {
    using CppType = std::shared_ptr<::testsuite::UsesSingleLanguageListeners>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    UsesSingleLanguageListenersCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    void CallForObjC(ObjcOnlyListener^ l) override {
        try {
            _cppRefHandle->get()->callForObjC(::Djinni::TestSuite::ObjcOnlyListener::ToCpp(l));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    ObjcOnlyListener^ ReturnForObjC() override {
        try {
            auto cs_result = _cppRefHandle->get()->returnForObjC();
            return ::Djinni::TestSuite::ObjcOnlyListener::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    void CallForJava(JavaOnlyListener^ l) override {
        try {
            _cppRefHandle->get()->callForJava(::Djinni::TestSuite::JavaOnlyListener::ToCpp(l));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    JavaOnlyListener^ ReturnForJava() override {
        try {
            auto cs_result = _cppRefHandle->get()->returnForJava();
            return ::Djinni::TestSuite::JavaOnlyListener::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    void CallForCs(CsOnlyListener^ l) override {
        try {
            _cppRefHandle->get()->callForCs(::Djinni::TestSuite::CsOnlyListener::ToCpp(l));
        } DJINNI_TRANSLATE_EXCEPTIONS()
    }

    CsOnlyListener^ ReturnForCs() override {
        try {
            auto cs_result = _cppRefHandle->get()->returnForCs();
            return ::Djinni::TestSuite::CsOnlyListener::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

class UsesSingleLanguageListenersCsProxy : public ::testsuite::UsesSingleLanguageListeners {
    using CsType = ::Djinni::TestSuite::UsesSingleLanguageListeners^;
    using CsRefType = ::djinni::CsRef<CsType>;
    using HandleType = ::djinni::CsProxyCache::Handle<::djinni::CsRef<CsType>>;
public:
    UsesSingleLanguageListenersCsProxy(CsRefType cs) : m_djinni_private_proxy_handle(std::move(cs)) {}
    UsesSingleLanguageListenersCsProxy(const ::djinni::CsRef<System::Object^>& ptr) : UsesSingleLanguageListenersCsProxy(CsRefType(dynamic_cast<CsType>(ptr.get()))) {}

    void callForObjC(const std::shared_ptr<::testsuite::ObjcOnlyListener> & l) override
    {
        djinni_private_get_proxied_cs_object()->CallForObjC(::Djinni::TestSuite::ObjcOnlyListener::FromCpp(l));
    }

    std::shared_ptr<::testsuite::ObjcOnlyListener> returnForObjC() override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->ReturnForObjC();
        // TODO check cs_result for null
        return ::Djinni::TestSuite::ObjcOnlyListener::ToCpp(cs_result);
    }

    void callForJava(const std::shared_ptr<::testsuite::JavaOnlyListener> & l) override
    {
        djinni_private_get_proxied_cs_object()->CallForJava(::Djinni::TestSuite::JavaOnlyListener::FromCpp(l));
    }

    std::shared_ptr<::testsuite::JavaOnlyListener> returnForJava() override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->ReturnForJava();
        // TODO check cs_result for null
        return ::Djinni::TestSuite::JavaOnlyListener::ToCpp(cs_result);
    }

    void callForCs(const std::shared_ptr<::testsuite::CsOnlyListener> & l) override
    {
        djinni_private_get_proxied_cs_object()->CallForCs(::Djinni::TestSuite::CsOnlyListener::FromCpp(l));
    }

    std::shared_ptr<::testsuite::CsOnlyListener> returnForCs() override
    {
        auto cs_result = djinni_private_get_proxied_cs_object()->ReturnForCs();
        // TODO check cs_result for null
        return ::Djinni::TestSuite::CsOnlyListener::ToCpp(cs_result);
    }

    CsType djinni_private_get_proxied_cs_object() {
        return m_djinni_private_proxy_handle.get().get();
    }

private:
    HandleType m_djinni_private_proxy_handle;
};

UsesSingleLanguageListeners::CppType UsesSingleLanguageListeners::ToCpp(UsesSingleLanguageListeners::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    if (auto cs_ref = dynamic_cast<UsesSingleLanguageListenersCppProxy^>(cs))
    {
        return cs_ref->djinni_private_get_proxied_cpp_object();
    }
    return ::djinni::get_cs_proxy<UsesSingleLanguageListenersCsProxy>(cs);
}

UsesSingleLanguageListeners::CsType UsesSingleLanguageListeners::FromCppOpt(const UsesSingleLanguageListeners::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    if (auto cpp_ptr = dynamic_cast<UsesSingleLanguageListenersCsProxy*>(cpp.get())) {
        return cpp_ptr->djinni_private_get_proxied_cs_object();
    }
    return ::djinni::get_cpp_proxy<UsesSingleLanguageListenersCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
