// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from varnames.djinni

#include "CsVarnameInterface.hpp"  // my header
#include "Error.hpp"
#include "Marshal.hpp"
#include "WrapperCache.hpp"
#include "_varname_interface_.hpp"
#include "_varname_record_.hpp"

namespace Djinni { namespace TestSuite {

ref class VarnameInterfaceCppProxy : public VarnameInterface {
    using CppType = std::shared_ptr<::testsuite::VarnameInterface>;
    using HandleType = ::djinni::CppProxyCache::Handle<CppType>;
public:
    VarnameInterfaceCppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    VarnameRecord^ Rmethod(VarnameRecord^ RArg) override {
        try {
            auto cs_result = _cppRefHandle->get()->_rmethod_(::Djinni::TestSuite::VarnameRecord::ToCpp(RArg));
            return ::Djinni::TestSuite::VarnameRecord::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    VarnameInterface^ Imethod(VarnameInterface^ IArg) override {
        try {
            auto cs_result = _cppRefHandle->get()->_imethod_(::Djinni::TestSuite::VarnameInterface::ToCpp(IArg));
            return ::Djinni::TestSuite::VarnameInterface::FromCpp(cs_result);
        } DJINNI_TRANSLATE_EXCEPTIONS()
        return nullptr; // Unreachable! (Silencing compiler warnings.)
    }

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};

VarnameInterface::CppType VarnameInterface::ToCpp(VarnameInterface::CsType cs)
{
    if (!cs) {
        return nullptr;
    }
    return dynamic_cast<VarnameInterfaceCppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
}

VarnameInterface::CsType VarnameInterface::FromCppOpt(const VarnameInterface::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    return ::djinni::get_cpp_proxy<VarnameInterfaceCppProxy^>(cpp);
}

} }  // namespace Djinni::TestSuite
