// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from yaml-test.djinni

#include "CsExternRecordWithDerivings.hpp"  // my header
#include "Marshal.hpp"
#include <memory>

namespace Djinni { namespace TestSuite {

ExternRecordWithDerivings::ExternRecordWithDerivings(RecordWithDerivings^ member,
                                                     Color e)
: _member(member)
, _e(e)
{}

RecordWithDerivings^ ExternRecordWithDerivings::Member::get()
{
    return _member;
}

Color ExternRecordWithDerivings::E::get()
{
    return _e;
}

System::String^ ExternRecordWithDerivings::ToString()
{
    return "ExternRecordWithDerivings[TODO]"; // TODO
}

bool ExternRecordWithDerivings::Equals(ExternRecordWithDerivings^ other) {
    if (ReferenceEquals(nullptr, other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return Member->Equals(other->Member) && E.Equals(other->E);
}

bool ExternRecordWithDerivings::Equals(System::Object^ obj) {
    if (ReferenceEquals(nullptr, obj)) return false;
    if (ReferenceEquals(this, obj)) return true;
    return obj->GetType() == GetType() && Equals((ExternRecordWithDerivings^) obj);
}

int ExternRecordWithDerivings::GetHashCode() {
    auto hashCode = Member->GetHashCode();
    hashCode = (hashCode * 397) ^ E.GetHashCode();
    return hashCode;
}

int ExternRecordWithDerivings::CompareTo(ExternRecordWithDerivings^ other) {
    if (ReferenceEquals(this, other)) return 0;
    if (ReferenceEquals(nullptr, other)) return 1;
    auto memberComparison = Member->CompareTo(other->Member);
    if (memberComparison != 0) return memberComparison;
    return E.CompareTo(other->E);
}

ExternRecordWithDerivings::CppType ExternRecordWithDerivings::ToCpp(ExternRecordWithDerivings::CsType^ cs)
{
    ASSERT(cs != nullptr);
    return {::Djinni::TestSuite::RecordWithDerivings::ToCpp(cs->Member),
            ::djinni::Enum<::testsuite::color, Color>::ToCpp(cs->E)};
}

ExternRecordWithDerivings::CsType^ ExternRecordWithDerivings::FromCpp(const ExternRecordWithDerivings::CppType& cpp)
{
    return gcnew ExternRecordWithDerivings::CsType(::Djinni::TestSuite::RecordWithDerivings::FromCpp(cpp.member),
                                                   ::djinni::Enum<::testsuite::color, Color>::FromCpp(cpp.e));
}

} }  // namespace Djinni::TestSuite
